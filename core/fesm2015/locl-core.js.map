{"version":3,"file":"locl-core.js","sources":["ng://@locl/core/lib/global.ts","ng://@locl/core/lib/init.ts","ng://@locl/core/lib/core.module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// **********************************************************************************************\n// This code to access the global object is mostly copied from `packages/core/src/util/global.ts`\n\ndeclare global {\n  var WorkerGlobalScope: any;\n}\n\nconst __globalThis = typeof globalThis !== 'undefined' && globalThis;\nconst __window = typeof window !== 'undefined' && window;\nconst __self =\n  typeof self !== 'undefined' &&\n  typeof WorkerGlobalScope !== 'undefined' &&\n  self instanceof WorkerGlobalScope &&\n  self;\n// Always use __globalThis if available; this is the spec-defined global variable across all\n// environments.\n// Then fallback to __global first; in Node tests both __global and __window may be defined.\nexport const _global: any = __globalThis || __window || __self;\n","// Load `$localize` onto the global scope - used if i18n tags appear in Angular templates.\nimport '@angular/localize/init';\nimport { ÉµÉµi18nPostprocess } from '@angular/core';\nimport { loadTranslations as _loadTranslations } from '@angular/localize';\nimport { ParsedTranslationBundle } from './interfaces';\nimport { _global } from './global';\n\n/**\n * The $locl function is an emulation of $localize but it returns a `LoclString`\n * instead of a real string. A `LoclString` is only evaluated when the template\n * is created, not just when the file containing that template is loaded by the\n * browser (at bootstrap). This means that we can delay initialization of the\n * string values and wait for the translations to be loaded.\n *\n * @param messageParts\n * @param expressions\n */\nexport const $locl = function(\n  messageParts: TemplateStringsArray,\n  ...expressions: readonly any[]\n) {\n  return new LoclString(messageParts, ...expressions);\n};\n\n// keep a local backup the of the real $localize\nconst backUpLocalize = _global.$localize;\n// override $localize until everything is loaded\n_global.$localize = $locl;\nlet isLoaded = false;\n\nclass LoclString extends String {\n  private readonly initParams: [TemplateStringsArray, ...(readonly any[])];\n  private value: string = null;\n  private postProcess = false;\n  constructor(\n    messageParts: TemplateStringsArray,\n    ...expressions: readonly any[]\n  ) {\n    super();\n    this.initParams = [messageParts, ...expressions];\n  }\n\n  toString(): string {\n    if (this.value) {\n      return this.value;\n    }\n    if (!isLoaded) {\n      return backUpLocalize(...this.initParams);\n    }\n    this.value = _global.$localize(...this.initParams);\n    if (this.postProcess) {\n      this.value = ÉµÉµi18nPostprocess(this.value);\n      this.postProcess = false;\n    }\n    return this.value;\n  }\n\n  replace(search: any, replaceValue: any): string {\n    this.postProcess = true;\n    return this as any;\n  }\n\n  valueOf(): string {\n    return this.toString();\n  }\n}\n\n/**\n * Finishes initialization of $localize, loads translations in memory and sets\n * the `LOCALE_ID` value.\n * Use this **only** if you're not using any of the two functions\n * `getTranslations` or `fetchTranslations`.\n */\nexport function loadTranslations(\n  parsedTranslationBundle?: ParsedTranslationBundle\n) {\n  // Restore $localize\n  _global.$localize = backUpLocalize;\n  if (\n    parsedTranslationBundle?.translations &&\n    Object.keys(parsedTranslationBundle.translations).length\n  ) {\n    _loadTranslations(parsedTranslationBundle.translations);\n  }\n  if (parsedTranslationBundle?.locale) {\n    _global.$localize.locale = parsedTranslationBundle.locale;\n  }\n  isLoaded = true;\n}\n","import { ÉµMessageId, ÉµTargetMessage } from '@angular/localize';\nimport { loadTranslations } from './init';\n\nexport function parseTranslations(\n  fileContent: string\n): ParsedTranslationBundle {\n  let data: ParsedTranslationBundle;\n\n  // Test if the content is json\n  if (\n    /^[\\],:{}\\s]*$/.test(\n      fileContent\n        .replace(/\\\\[\"\\\\\\/bfnrtu]/g, '@')\n        .replace(\n          /\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g,\n          ']'\n        )\n        .replace(/(?:^|:|,)(?:\\s*\\[)+/g, '')\n    )\n  ) {\n    data = JSON.parse(fileContent);\n  } else {\n    throw new Error('Only JSON translation files are supported at the moment');\n  }\n  return data;\n}\n\n/**\n * Gets a translation file from a server using an XHR HTTP request\n * @param url\n * @param method the method used to get the translations, either `GET` or `POST`\n * @param headers an object containing a list of header/value to set for the XHR request\n * @param async defines if the XHR request should be async (default) or not\n */\nexport function getTranslations(\n  url,\n  method: 'GET' | 'POST' = 'GET',\n  headers: { [key: string]: string } = {},\n  async = true\n): Promise<ParsedTranslationBundle> {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n\n    xhr.onload = function() {\n      try {\n        const res = parseTranslations(xhr.responseText);\n        loadTranslations(res);\n        resolve(res);\n      } catch (e) {\n        reject(e);\n      }\n    };\n\n    xhr.onerror = function() {\n      reject(new Error('Network request failed'));\n    };\n\n    xhr.ontimeout = function() {\n      reject(new Error('Network request timeout'));\n    };\n\n    xhr.onabort = function() {\n      reject(new Error('Network request aborted'));\n    };\n\n    Object.keys(headers).forEach(key =>\n      xhr.setRequestHeader(key, headers[key])\n    );\n    xhr.open(method, url, async);\n    xhr.send();\n  });\n}\n\nexport interface ParsedTranslationBundle {\n  locale: string;\n  translations: Record<ÉµMessageId, ÉµTargetMessage>;\n}\n\n/**\n * Gets a translation file from a server using the fetch API\n * @param url\n * @param method the method used to get the translations, either `GET` or `POST`\n * @param headers an object containing a list of header/value to set for the XHR request\n */\nexport function fetchTranslations(\n  url: string,\n  method: 'GET' | 'POST' = 'GET',\n  headers: { [key: string]: string } = {}\n): Promise<ParsedTranslationBundle> {\n  return fetch(url, { method, headers })\n    .then(response => response.text())\n    .then((response: string) => {\n      const res = parseTranslations(response);\n      loadTranslations(res);\n      return res;\n    });\n}\n\n/**\n * Returns the language code name from the browser, e.g. \"fr\"\n */\nexport function getBrowserLang(): string {\n  if (\n    typeof window === 'undefined' ||\n    typeof window.navigator === 'undefined'\n  ) {\n    return '';\n  }\n\n  return getBrowserCultureLang().split('-')[0];\n}\n\n/**\n * Returns the culture language code name from the browser, e.g. \"fr-FR\"\n */\nexport function getBrowserCultureLang(): string {\n  if (\n    typeof window === 'undefined' ||\n    typeof window.navigator === 'undefined'\n  ) {\n    return '';\n  }\n\n  let browserCultureLang = window.navigator.languages\n    ? window.navigator.languages[0]\n    : null;\n  browserCultureLang =\n    browserCultureLang ||\n    window.navigator.language ||\n    (window.navigator as any).browserLanguage ||\n    (window.navigator as any).userLanguage;\n\n  return browserCultureLang.replace(/_/g, '-');\n}\n"],"names":["_loadTranslations"],"mappings":";;;;;;;;;;;;;;;;;;MAeM,YAAY,GAAG,OAAO,UAAU,KAAK,WAAW,IAAI,UAAU;;MAC9D,QAAQ,GAAG,OAAO,MAAM,KAAK,WAAW,IAAI,MAAM;;MAClD,MAAM,GACV,OAAO,IAAI,KAAK,WAAW;IAC3B,OAAO,iBAAiB,KAAK,WAAW;IACxC,IAAI,YAAY,iBAAiB;IACjC,IAAI;;;;;MAIO,OAAO,GAAQ,YAAY,IAAI,QAAQ,IAAI,MAAM;;;;;;;;;;;;;;;;;;MCRjD,KAAK;;;;;AAAG,UACnB,YAAkC,EAClC,GAAG,WAA2B;IAE9B,OAAO,IAAI,UAAU,CAAC,YAAY,EAAE,GAAG,WAAW,CAAC,CAAC;AACtD,CAAC;;;MAGK,cAAc,GAAG,OAAO,CAAC,SAAS;;AAExC,OAAO,CAAC,SAAS,GAAG,KAAK,CAAC;;IACtB,QAAQ,GAAG,KAAK;AAEpB,MAAM,UAAW,SAAQ,MAAM;;;;;IAI7B,YACE,YAAkC,EAClC,GAAG,WAA2B;QAE9B,KAAK,EAAE,CAAC;QANF,UAAK,GAAW,IAAI,CAAC;QACrB,gBAAW,GAAG,KAAK,CAAC;QAM1B,IAAI,CAAC,UAAU,GAAG,CAAC,YAAY,EAAE,GAAG,WAAW,CAAC,CAAC;KAClD;;;;IAED,QAAQ;QACN,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,OAAO,IAAI,CAAC,KAAK,CAAC;SACnB;QACD,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO,cAAc,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;SAC3C;QACD,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;QACnD,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,CAAC,KAAK,GAAG,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC3C,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;SAC1B;QACD,OAAO,IAAI,CAAC,KAAK,CAAC;KACnB;;;;;;IAED,OAAO,CAAC,MAAW,EAAE,YAAiB;QACpC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,0BAAO,IAAI,GAAQ;KACpB;;;;IAED,OAAO;QACL,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;KACxB;CACF;;;;;;IAlCC,gCAAyE;;;;;IACzE,2BAA6B;;;;;IAC7B,iCAA4B;;;;;;;;;;SAwCd,gBAAgB,CAC9B,uBAAiD;;IAGjD,OAAO,CAAC,SAAS,GAAG,cAAc,CAAC;IACnC,IACE,CAAA,uBAAuB,aAAvB,uBAAuB,uBAAvB,uBAAuB,CAAE,YAAY;QACrC,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,YAAY,CAAC,CAAC,MAAM,EACxD;QACAA,kBAAiB,CAAC,uBAAuB,CAAC,YAAY,CAAC,CAAC;KACzD;IACD,IAAI,uBAAuB,aAAvB,uBAAuB,uBAAvB,uBAAuB,CAAE,MAAM,EAAE;QACnC,OAAO,CAAC,SAAS,CAAC,MAAM,GAAG,uBAAuB,CAAC,MAAM,CAAC;KAC3D;IACD,QAAQ,GAAG,IAAI,CAAC;AAClB;;;;;;;;;;;SCrFgB,iBAAiB,CAC/B,WAAmB;;QAEf,IAA6B;;IAGjC,IACE,eAAe,CAAC,IAAI,CAClB,WAAW;SACR,OAAO,CAAC,kBAAkB,EAAE,GAAG,CAAC;SAChC,OAAO,CACN,kEAAkE,EAClE,GAAG,CACJ;SACA,OAAO,CAAC,sBAAsB,EAAE,EAAE,CAAC,CACvC,EACD;QACA,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;KAChC;SAAM;QACL,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;KAC5E;IACD,OAAO,IAAI,CAAC;AACd,CAAC;;;;;;;;;SASe,eAAe,CAC7B,GAAG,EACH,SAAyB,KAAK,EAC9B,UAAqC,EAAE,EACvC,KAAK,GAAG,IAAI;IAEZ,OAAO,IAAI,OAAO;;;;;IAAC,CAAC,OAAO,EAAE,MAAM;;cAC3B,GAAG,GAAG,IAAI,cAAc,EAAE;QAEhC,GAAG,CAAC,MAAM;;;QAAG;YACX,IAAI;;sBACI,GAAG,GAAG,iBAAiB,CAAC,GAAG,CAAC,YAAY,CAAC;gBAC/C,gBAAgB,CAAC,GAAG,CAAC,CAAC;gBACtB,OAAO,CAAC,GAAG,CAAC,CAAC;aACd;YAAC,OAAO,CAAC,EAAE;gBACV,MAAM,CAAC,CAAC,CAAC,CAAC;aACX;SACF,CAAA,CAAC;QAEF,GAAG,CAAC,OAAO;;;QAAG;YACZ,MAAM,CAAC,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC,CAAC;SAC7C,CAAA,CAAC;QAEF,GAAG,CAAC,SAAS;;;QAAG;YACd,MAAM,CAAC,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC,CAAC;SAC9C,CAAA,CAAC;QAEF,GAAG,CAAC,OAAO;;;QAAG;YACZ,MAAM,CAAC,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC,CAAC;SAC9C,CAAA,CAAC;QAEF,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO;;;;QAAC,GAAG,IAC9B,GAAG,CAAC,gBAAgB,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,EACxC,CAAC;QACF,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;QAC7B,GAAG,CAAC,IAAI,EAAE,CAAC;KACZ,EAAC,CAAC;AACL,CAAC;;;;sCAKA;;;IAFC,yCAAe;;IACf,+CAAiD;;;;;;;;;SASnC,iBAAiB,CAC/B,GAAW,EACX,SAAyB,KAAK,EAC9B,UAAqC,EAAE;IAEvC,OAAO,KAAK,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC;SACnC,IAAI;;;;IAAC,QAAQ,IAAI,QAAQ,CAAC,IAAI,EAAE,EAAC;SACjC,IAAI;;;;IAAC,CAAC,QAAgB;;cACf,GAAG,GAAG,iBAAiB,CAAC,QAAQ,CAAC;QACvC,gBAAgB,CAAC,GAAG,CAAC,CAAC;QACtB,OAAO,GAAG,CAAC;KACZ,EAAC,CAAC;AACP,CAAC;;;;;SAKe,cAAc;IAC5B,IACE,OAAO,MAAM,KAAK,WAAW;QAC7B,OAAO,MAAM,CAAC,SAAS,KAAK,WAAW,EACvC;QACA,OAAO,EAAE,CAAC;KACX;IAED,OAAO,qBAAqB,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/C,CAAC;;;;;SAKe,qBAAqB;IACnC,IACE,OAAO,MAAM,KAAK,WAAW;QAC7B,OAAO,MAAM,CAAC,SAAS,KAAK,WAAW,EACvC;QACA,OAAO,EAAE,CAAC;KACX;;QAEG,kBAAkB,GAAG,MAAM,CAAC,SAAS,CAAC,SAAS;UAC/C,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;UAC7B,IAAI;IACR,kBAAkB;QAChB,kBAAkB;YAClB,MAAM,CAAC,SAAS,CAAC,QAAQ;YACzB,oBAAC,MAAM,CAAC,SAAS,IAAS,eAAe;YACzC,oBAAC,MAAM,CAAC,SAAS,IAAS,YAAY,CAAC;IAEzC,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;AAC/C;;;;;;;;;;;;;;;;"}